using System;
using System.Collections.Specialized;

using System.Collections.ObjectModel;
using System.Linq;

using System.Xml;
using AndroidX.Fragment.App.StrictMode;
using DevExpress.Maui.Scheduler;
using DevExpress.Maui.Scheduler.Internal;
using DevExpress.Maui.Editors;
using Microsoft.Maui.Controls;
using StudyN.Utilities;
using DevExpress.Data.Mask;

using System.Text.Json;
using System.Threading.Tasks;
using Newtonsoft.Json;



namespace StudyN.Models
{
    public class CalendarManager
    {
        public static DateTime BaseDate = DateTime.Today;


        public static string[] AppointmentLabelTitles = { "Uncategorized", "StudyN Time", "Class", "Appointment", "Assignment", "Free Time", "Exam", "Office Hours", "Work" };
        public static Color[] AppointmentLabelColors = {Color.FromArgb("#A0A0A0"),   // 1. gray
                                                        Color.FromArgb("#3333FF"),   // 1. dark blue
                                                        Color.FromArgb("#00FF00"),   // 3. green                                                        
                                                        Color.FromArgb("#D80073"),   // 4. dark pink
                                                        Color.FromArgb("#FFCB21"),   // 5. mustard
                                                        Color.FromArgb("#1BA1E2"),   // 6. medium blue                                                        
                                                        Color.FromArgb("#FF8000"),   // 7. orange
                                                        Color.FromArgb("#FF0000"),   // 8. burgundy                                                         
                                                        Color.FromArgb("#6A00FF") }; // 9. purple
        public static double[] AppointmentCategoryX = { 0.65f, 0.35f, 0.9f, 0.15f, 0.52f, 0.1f, 0.98f, 0.8f };
        // Uncategorized category

        public static AppointmentCategory Uncategorized = new()

        {

            Id = Guid.NewGuid(),

            Caption = "Uncategorized",

            Color = Color.FromArgb("#D9D9D9"),

            PickerXPosition = 0.5f,

            PickerYPosition = 1.0f

        };

        public static string[] AppointmentStatusTitles = { "Free", "Busy", "Blocked", "Tentative", "Flexible" };
        public static Color[] AppointmentStatusColors = { Color.FromArgb("#00FF80"),   // 1. light green
                                                          Color.FromArgb("#FF3333"),   // 2. red                                                        
                                                          Color.FromArgb("#FF33FF"),   // 3. magenta
                                                          Color.FromArgb("#FFFF00"),   // 4. yellow
                                                          Color.FromArgb("#00FFFF") }; // 5. cyan

        //estepanek: I want to leave these hard-coded appointments
        //           here, because I think they are valuable in
        //           helping to make sure everything works correctly,
        //           at least for now.  I'm prepending with "TEST_" so
        //           that people don't get them mixed up with appointments
        //           they have created and appointments that are generated
        //           by the auto scheduler
        public static string[] AppointmentTitles = { "TEST_Soccer", "TEST_Math Class", "TEST_CS Class",
                                                "TEST_Hike", "TEST_Sleep", "TEST_English Class",
                                                "TEST_Professor Office", "TEST_Work", "TEST_Concert",
                                                "TEST_Homework", "TEST_Project", "TEST_GYM",
                                                "TEST_Going to get Food"};

        static Random rnd = new Random();

        private int nextId = 1; // estepanek: persist a counter somewhere later when appointments are persisted
        public int getNextAppointmentId() // estepanek: quickie fix to appointment id issue
        {
            return nextId++;
        }

        // estepanek: I uncommented out this code to use for
        //            testing and troubleshooting appointment colors.
        //            I would like to keep it in for the time being
        //            I cut down on the number of hard-coded
        //            appointments that are generated by this code
        //            so that it is more manageable.
        //            This code could prove useful in creating appointments
        //            of different scenarios for testing the auto scheduler,
        //            so we need to keep it.
        void CreateAppointments()
        {
            int appointmentId = 1;
            int appointmentListIndex = 0;
            DateTime start;
            TimeSpan duration;
            Guid guid;
            int dayrange = 2;  // make the hard-coded data smaller
            int apptcount = 3; // make the hard-coded data smaller
            //for (int i = -20; i < 20; i++)
            for (int i = -dayrange; i < dayrange; i++)
            {
                //for (int j = 0; j < 15; j++)
                for (int j = 0; j < apptcount; j++)
                {
                    int room = rnd.Next(1, 100);
                    start = BaseDate.AddDays(i).AddHours(rnd.Next(8, 17)).AddMinutes(rnd.Next(0, 40));
                    duration = TimeSpan.FromMinutes(rnd.Next(20, 30));
                    CreateAppointment(AppointmentTitles[appointmentListIndex], // estepanek: generating TEST_ appointments
                                        start,
                                        duration,
                                        room,
                                        appointmentListIndex, // set the LabelId to this for random color
                                        1, // just default to Status = Busy (Red)
                                         new Guid(),
                                        "test data");
                    appointmentId++;
                    appointmentListIndex++;
                    if (appointmentListIndex >= AppointmentTitles.Length - 1)
                    {
                        appointmentListIndex = 1;
                    }
                }
            }
        }

        void CreateAppointmentLabels()
        {
            int count = AppointmentLabelTitles.Length;
            for (int i = 0; i < count; i++)
            {
                AppointmentLabel lab = new AppointmentLabel();
                lab.Id = i;
                lab.Caption = AppointmentLabelTitles[i];
                Console.WriteLine("Created label Num_" + i.ToString() + " = " + lab.Caption);
                lab.Color = AppointmentLabelColors[i];
                AppointmentLabels.Add(lab);
            }
        }

        // estepanek: I had to comment out the picker position
        // settings because they were causing an error
        public void CreateAppointmentCategories()
        {
            int count = AppointmentLabelTitles.Length;
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("In CreateApointmentCategories");
                AppointmentCategory cat = new AppointmentCategory();
                cat.Id = Guid.NewGuid();

                cat.Caption = AppointmentLabelTitles[i];
                cat.Color = AppointmentLabelColors[i];
                //cat.PickerXPosition = AppointmentCategoryX[i];
                //cat.PickerYPosition = 0.5f;
                AppointmentCategories.Add(cat);
                EventBus.PublishEvent(
                            new StudynEvent(cat.Id, StudynEvent.StudynEventType.CategoryAdd));
            }
        }

        public AppointmentCategory GetAppointmentCategory(Guid id)
        {
            // go through categories
            foreach (AppointmentCategory category in AppointmentCategories)
            {
                // if the category is found return it
                if (category.Id == id)
                {
                    return category;
                }
            }
            // else return null
            return null;
        }

        void CreateAppointmentStatuses()
        {
            int count = AppointmentStatusTitles.Length;
            for (int i = 0; i < count; i++)
            {
                AppointmentStatus stat = new AppointmentStatus();
                stat.Id = i;
                stat.Caption = AppointmentStatusTitles[i];
                Console.WriteLine("Created appointment status Num_" + i.ToString() + " = " + stat.Caption);
                stat.Color = AppointmentStatusColors[i];
                AppointmentStatuses.Add(stat);
            }
        }


        public Appointment CreateAppointment(string appointmentTitle,
                                            DateTime start,
                                            TimeSpan duration,
                                            int room, // location not used
                                            int labelId,
                                            int statusId,
                                            Guid uniqueId,
                                            String from = "")
        {
            Appointment appt = new()
            {
                Id = getNextAppointmentId(),
                Start = start,
                End = start.Add(duration),
                Subject = appointmentTitle,
                LabelId = labelId,
                //StatusId = AppointmentStatuses[rnd.Next(0, 5)].Id, 
                StatusId = statusId, // auto scheduler sets this to 2 for BLocked
                Location = string.Format("{0}", room), // this location field isn't being used
                Description = string.Empty,
                UniqueId = uniqueId,
                From = from
            };

            Console.WriteLine("In CreateAppointment");
            Console.WriteLine("appt.Id = " + appt.Id.ToString());
            Console.WriteLine("appt.Subject = " + appt.Subject.ToString());
            Console.WriteLine("appt.Start = " + appt.Start.ToString());
            Console.WriteLine("appt.LabelId = " + appt.LabelId.ToString());
            Console.WriteLine("appt.ParentTaskId = " + appt.ParentTaskId.ToString());
            Console.WriteLine("appt.From = " + appt.From.ToString());
            Appointments.Add(appt);
            Console.WriteLine("Just added appointment.");

            // Publish appointment add event

            if (appt.From != "autoScheduler")

            {

                EventBus.PublishEvent(

                            new StudynEvent(uniqueId, StudynEvent.StudynEventType.AppointmentAdd));
            }

            return appt;
        }

        /// <summary>
        /// Function for creating a new category and adding it to category list
        /// </summary>
        /// <param name="categoryName"></param>
        /// <param name="categoryColor"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public AppointmentCategory CreateCategory(string categoryName,
                                                   Color categoryColor,
                                                   double x, double y,
                                                   Guid id = new Guid())
        {
            // Makes a new category
            AppointmentCategory cat = new()
            {
                Id = id,
                Caption = categoryName,
                Color = categoryColor,
                PickerXPosition = x,
                PickerYPosition = y
            };

            // Adds category to category list
            AppointmentCategories.Add(cat);

            EventBus.PublishEvent(
                        new StudynEvent(cat.Id, StudynEvent.StudynEventType.CategoryAdd));

            return cat;

        }

        /// <summary>
        /// Edits an existing category
        /// </summary>
        /// <param name="categoryName"></param>
        /// <param name="categoryColor"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool EditCategory(string categoryName,
                                 Color categoryColor,
                                 double x, double y,
                                 Guid id)


        {

            // Get the category

            AppointmentCategory cat = null;

            foreach (AppointmentCategory category in AppointmentCategories)

            {

                if (category.Id == id)

                {

                    cat = category;

                }

            }

            if (cat == null)

            {

                return false;

            }

            // add new elements to category

            cat.Caption = categoryName;

            cat.Color = categoryColor;

            cat.PickerXPosition = x;

            cat.PickerYPosition = y;

            EventBus.PublishEvent(
                        new StudynEvent(id, StudynEvent.StudynEventType.CategoryEdit));

            return true;

        }

        /// <summary>
        /// Removes a category
        /// </summary>
        /// <param name="id"></param>
        public void RemoveCategory(Guid id)
        {
            // Search for category
            foreach (AppointmentCategory category in AppointmentCategories)
            {
                if (category.Id == id)
                {
                    // go through the appointments with the category
                    foreach (Appointment appointment in Appointments)
                    {
                        if (appointment.LabelId == category)
                        {
                            // Make appointment uncategorized
                            appointment.LabelId = Uncategorized;
                        }
                    }
                    // Remove category
                    AppointmentCategories.Remove(category);
                    EventBus.PublishEvent(
                                new StudynEvent(id, StudynEvent.StudynEventType.CategoryDelete));
                    return;
                }
            }
        }

        /// <summary>
        /// Save sleep time
        /// </summary>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        public void SaveSleepTime(DateTime startTime, DateTime endTime)
        {
            // save information into Sleep Time
            SleepTime.StartTime = startTime;
            SleepTime.EndTime = endTime;
            EventBus.PublishEvent(
                new StudynEvent(Guid.NewGuid(), StudynEvent.StudynEventType.SleepTimeChanged));
        }



        // Properly handle appointments associated with a newly completed task
        public void TaskCompleted(Guid uniqueId)
        {
            // Get list of all potentiall affected appointments
            var affectedAppointments = new List<Appointment>();
            foreach (Appointment apt in Appointments)
            {
                if (apt.UniqueId == uniqueId)
                {
                    affectedAppointments.Add(apt);
                }
            }

            // Now take the list of associated appointments and deal with
            // them as needed. Can't do this above because out iterator
            // will become invalid the second we have to remove an appoinment
            foreach (Appointment apt in affectedAppointments)
            {
                // If Start is after now, remove appointment
                if (apt.Start > DateTime.Now)
                {
                    Appointments.Remove(apt);
                }

                // If event is currently happening,
                // truncate the appointments time to now
                if (apt.Start < DateTime.Now
                    && apt.End > DateTime.Now)
                {
                    apt.End = DateTime.Now;
                }
            }

        }

        /// <summary>
        /// Loads from sleep time json file into sleep time object
        /// </summary>
        public void LoadSleepTime()
        {
            string filename = FileSystem.AppDataDirectory + "/sleepTime.json";
            if (File.Exists(filename))
            {
                string jsonFileText = File.ReadAllText(filename);
                SleepTime = JsonConvert.DeserializeObject<SleepTime>(jsonFileText);
            }
        }

        private void AppointmentCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            //different kind of changes that may have occurred in collection
            if (e.Action == NotifyCollectionChangedAction.Add)
            {
                try
                {
                    var apptList = sender as ObservableCollection<Appointment>;

                    foreach (Appointment appt in apptList)
                    {
                        // Publish add appointment
                        EventBus.PublishEvent(
                                    new StudynEvent(appt.UniqueId,
                                    StudynEvent.StudynEventType.AppointmentAdd));
                    }
                }
                catch (NullReferenceException execption)
                {
                    Console.WriteLine(execption.Message);
                }
            }
            if (e.Action == NotifyCollectionChangedAction.Remove)
            {
                // Publish delete appointment
                EventBus.PublishEvent(
                            new StudynEvent(new Guid(),
                            StudynEvent.StudynEventType.AppointmentDelete));
            }
        }




        // Calculate the number of total hours scheduled to work on tasks today
        public int NumHoursScheduledToday()
        {
            double numMinScheduled = 0;
            foreach (Appointment appt in Appointments)
            {
                // Check if associated task exits
                if (GlobalTaskData.TaskManager.GetTask(appt.UniqueId) != null)
                {
                    numMinScheduled += (appt.End - appt.Start).TotalMinutes;
                }
            }
            // Return as int for simple UI
            return (int)(numMinScheduled / 60);
        }

        // Calculate the number of hours scheduled today that have already been completed
        public int NumHoursCompletedToday()
        {
            double numMinCompleted = 0;
            foreach (Appointment appt in Appointments)
            {
                TaskItem task = GlobalTaskData.TaskManager.GetTask(appt.UniqueId);
                // Check if associated task exits
                if (task != null)
                {
                    // Look at logged times
                    if (task.TimeList != null)
                    {
                        foreach (TaskItemTime taskTime in task.TimeList)
                        {
                            // Add up times that finished before "now"
                            // that started sometime today
                            if (taskTime.stop < DateTime.Now
                                && taskTime.start == DateTime.Today)
                            {
                                numMinCompleted += taskTime.span.TotalMinutes;
                            }
                        }
                    }
                }
            }
            return (int)(numMinCompleted / 60);
        }

        public void LoadFilesIntoAppointCategories()
        {
            string jsonFileText;
            // gets categories
            string[] categoryFileList = FileManager.LoadCategoryFileNames();
            foreach (string file in categoryFileList)
            {
                jsonFileText = File.ReadAllText(file);
                SerializedAppointmentCategory deserializer = JsonConvert.DeserializeObject<SerializedAppointmentCategory>(jsonFileText);
                AppointmentCategory category = new AppointmentCategory();
                category.Id = deserializer.Id;
                category.Caption = deserializer.Caption;
                category.Color = Color.FromArgb(deserializer.Color);
                category.PickerXPosition = deserializer.PickerXPosition;
                category.PickerYPosition = deserializer.PickerYPosition;
                AppointmentCategories.Add(category);
            }
        }



        public ObservableCollection<Appointment> Appointments { get; private set; }
        public ObservableCollection<AppointmentCategory> AppointmentCategories { get; private set; }
        public ObservableCollection<AppointmentLabel> AppointmentLabels { get; private set; }
        public ObservableCollection<AppointmentStatus> AppointmentStatuses { get; private set; }
        public SleepTime SleepTime { get; private set; }


        public CalendarManager()
        {
            Appointments = new ObservableCollection<Appointment>();
            AppointmentCategories = new ObservableCollection<AppointmentCategory>();
            AppointmentLabels = new ObservableCollection<AppointmentLabel>();
            AppointmentStatuses = new ObservableCollection<AppointmentStatus>();
            SleepTime = new SleepTime();

            // Handle changes to collection
            Appointments.CollectionChanged  += new NotifyCollectionChangedEventHandler(AppointmentCollectionChanged);

            // check if pointer file doesn't exist before make default files
            if (FileManager.LoadCategoryFileNames().Length == 0)
            {
                 CreateAppointmentCategories(); 
            }

            CreateAppointmentLabels();

            CreateAppointmentStatuses();

            // estepanek: this generates some hard-coded appointments
            // and I un-commented it out to use for testing appointment
            // colors, etc.  I would like to leave them in for the time being
            // because they are helpful in making sure that things are working
            // correctly. If changes are made, it is valuable to know that
            // manually creating appointments still works.
            CreateAppointments(); // estepanek: I will comment this out before committing my code
        }

        public void LoadFilesIntoLists()
        {
            string jsonfiletext;

            // gets completed tasks
            string[] apptfilelist = FileManager.LoadApptFileNames();
            foreach (string file in apptfilelist)
            {
                jsonfiletext = File.ReadAllText(file);
                Console.WriteLine(jsonfiletext);
                Appointment appt = JsonConvert.DeserializeObject<Appointment>(jsonfiletext);

                //TaskItem task = JsonSerializer.Deserialize<TaskItem>(jsonfiletext)!;

                Appointments.Add(appt);
            }


        }

        public Appointment GetAppointment(Guid taskId)
        {
            //Checking each item in the current task list
            foreach (Appointment appt in Appointments)
            {
                //If the task is found, return the task
                if (appt.UniqueId == taskId)
                {
                    return appt;
                }
            }

            //If not found in either list, return null
            return null;
        }

    }
}

